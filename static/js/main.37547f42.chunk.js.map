{"version":3,"sources":["App.styled.jsx","App.jsx","index.js"],"names":["Container","styled","div","Title","h1","Section","Button","button","App","useState","sec","setSec","status","setStatus","isOn","setIsOn","waitClick$","Subject","pipe","buffer","debounceTime","map","item","length","filter","subscribe","useEffect","timer$","Observable","observer","intervalId","setInterval","next","clearInterval","error","console","log","complete","subscription","unsubscribe","countTime","seconds","minutes","Math","floor","hours","showTime","key","onClick","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mOAEaA,EAAYC,IAAOC,IAAV,6KAUTC,EAAQF,IAAOG,GAAV,oJAOLC,EAAUJ,IAAOC,IAAV,gGAMPI,EAASL,IAAOM,OAAV,yW,OCpBNC,EAAM,WAAO,IAAD,EACDC,mBAAS,GADR,mBAChBC,EADgB,KACXC,EADW,OAEKF,mBAAS,QAFd,mBAEhBG,EAFgB,KAERC,EAFQ,OAGCJ,oBAAS,GAHV,mBAGhBK,EAHgB,KAGVC,EAHU,KA2BjBC,EAAa,IAAIC,IAEvBD,EAAWE,KACTC,YAAOH,EAAWE,KAAKE,YAAa,OACpCC,aAAI,SAAAC,GAAI,OAAIA,EAAKC,UACjBC,aAAO,SAAAF,GAAI,OAAa,IAATA,MACfG,WAAU,WACVZ,EAAU,QACVE,GAAQ,MAGVW,qBAAU,WACR,GAAe,QAAXd,EAAkB,CACpB,IAAMe,EAAS,IAAIC,KAAW,SAAAC,GAC5B,IAAMC,EAAaC,aAAY,WAC7BF,EAASG,SACR,KAEH,OAAO,WACLC,cAAcH,OAGZD,EAAW,CACfG,KAAM,WACJrB,GAAO,SAACD,GAAD,OAASA,EAAM,MAExBwB,MAAO,WACLC,QAAQC,IAAI,UAEdC,SAAU,WACRF,QAAQC,IAAI,uBAGVE,EAAeX,EAAOF,UAAUI,GACtC,OAAQ,WACNS,EAAaC,kBAGhB,CAAC3B,IAGJ,IAAM4B,EAAY,CAChBC,QAAU/B,EAAM,GAChBgC,QAASC,KAAKC,MAAMlC,EAAM,IAC1BmC,MAAOF,KAAKC,MAAMlC,EAAM,OAEpBoC,EAAW,GACjB,IAAK,IAAIC,KAAOP,EAEZM,EAASC,GADPP,EAAUO,GAAO,EACH,KAETP,EAAUO,GAAO,GACxB,WAAoBP,EAAUO,IAG9B,UAAmBP,EAAUO,IAIjC,OACE,eAAC/C,EAAD,WACE,eAACG,EAAD,WAAQ2C,EAASD,MAAjB,IAAyBC,EAASJ,QAAlC,IAA4CI,EAASL,WACrD,eAACpC,EAAD,WACIS,EAEK,cAACR,EAAD,CAAQ0C,QAjFR,WACXnC,EAAU,QACVF,EAAO,GACPI,GAAQ,IA8EG,kBADA,cAACT,EAAD,CAAQ0C,QArFP,WACZnC,EAAU,OACVE,GAAQ,IAmFG,mBAEP,cAACT,EAAD,CAAQ0C,QAtED,WACXhC,EAAWgB,QAqEP,kBACA,cAAC1B,EAAD,CAAQ0C,QA7EA,WACZrC,EAAO,GACPI,GAAQ,GACRF,EAAU,QA0EN,0BC/FRoC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.37547f42.chunk.js","sourcesContent":["import styled from \"@emotion/styled\"\n\nexport const Container = styled.div`\n  max-width: 500px;\n  margin: 60px auto;\n  padding: 15px;\n\n  background-color: #B1A296;\n  border: 1px solid black;\n  border-radius: 15px;\n`\n\nexport const Title = styled.h1`\n  margin: 0;\n  text-align: center;\n  font-family: 'Josefin Sans', sans-serif;\n  font-size: 70px;\n  color: #501B1D;\n`\nexport const Section = styled.div`\n  text-align: center;\n  margin-top: 30px;\n  margin-bottom: 20px;\n`\n\nexport const Button = styled.button`\n  min-width: 80px;\n  padding: 10px 10px;\n  font-family: 'Josefin Sans', sans-serif;\n  font-size: 20px;\n  font-weight: 600;\n\n  color: white;\n  border: none;\n  border-radius: 5px;\n  background-color: #6F2232;\n  cursor: pointer;\n\n  :not(:last-child) {\n  margin-right: 20px;\n  }\n  :hover {\n  transform: scale(1.1);\n  }\n`","import { useEffect, useState } from \"react\"\r\nimport { Observable, Subject } from \"rxjs\";\r\nimport { buffer, map, filter, debounceTime } from \"rxjs/operators\"\r\nimport { Container, Title, Button, Section } from \"App.styled\";\r\n\r\nexport const App = () => {\r\n  const [sec, setSec] = useState(0);\r\n  const [status, setStatus] = useState(\"stop\");\r\n  const [isOn, setIsOn] = useState(false)\r\n \r\n  \r\n  const start = () => {\r\n    setStatus(\"run\");\r\n    setIsOn(true)\r\n  };\r\n \r\n  const stop = () => {\r\n    setStatus(\"stop\");\r\n    setSec(0);\r\n    setIsOn(false)\r\n  };\r\n \r\n  const reset = () => {\r\n    setSec(0);\r\n    setIsOn(true);\r\n    setStatus(\"run\")\r\n  };\r\n \r\n  const wait = () => {\r\n    waitClick$.next();\r\n  }\r\n\r\n  const waitClick$ = new Subject()\r\n\r\n  waitClick$.pipe(\r\n    buffer(waitClick$.pipe(debounceTime(300))),\r\n    map(item => item.length),\r\n    filter(item => item === 2),\r\n  ).subscribe(() => {\r\n    setStatus(\"wait\");\r\n    setIsOn(false)\r\n  })\r\n\r\n  useEffect(() => {\r\n    if (status === \"run\") {\r\n      const timer$ = new Observable(observer => {\r\n        const intervalId = setInterval(() => {\r\n          observer.next();\r\n        }, 1000);\r\n\r\n        return () => {\r\n          clearInterval(intervalId);\r\n        };\r\n      });\r\n      const observer = {\r\n        next: () => {\r\n          setSec((sec) => sec + 1)\r\n        },\r\n        error: () => {\r\n          console.log(\"error\")\r\n        },\r\n        complete: () => {\r\n          console.log(\"observer complete\")\r\n        }\r\n      };\r\n      const subscription = timer$.subscribe(observer);\r\n      return (() => {\r\n        subscription.unsubscribe();\r\n      })\r\n    }\r\n  }, [status])\r\n \r\n\r\n  const countTime = {\r\n    seconds: (sec % 60),\r\n    minutes: Math.floor(sec / 60),\r\n    hours: Math.floor(sec / 3600),\r\n  }\r\n  const showTime = {}\r\n  for (let key in countTime) {\r\n    if (countTime[key] < 1) {\r\n      showTime[key] = \"00\";\r\n    }\r\n    else if (countTime[key] < 10) {\r\n      showTime[key] = `0${countTime[key]}`\r\n    }\r\n    else {\r\n      showTime[key] = `${countTime[key]}`;\r\n    }\r\n  }\r\n\r\n  return (\r\n    <Container>\r\n      <Title>{showTime.hours}:{showTime.minutes}:{showTime.seconds}</Title>\r\n      <Section>\r\n        {!isOn\r\n              ?<Button onClick={start}>Start</Button>\r\n              :<Button onClick={stop}>Stop</Button>}\r\n        <Button onClick={wait}>Wait</Button>\r\n        <Button onClick={reset}>Reset</Button>        \r\n    </Section>\r\n    </Container>\r\n  );\r\n}","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { App } from \"App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}